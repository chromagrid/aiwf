{
  "name": "AIWF v11 â€¢ API",
  "nodes": [
    {
      "id": "wh_options",
      "name": "OPTIONS /aiwf/v11",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "parameters": {
        "httpMethod": "OPTIONS",
        "path": "aiwf/v11",
        "responseMode": "responseNode"
      },
      "position": [
        60,
        80
      ]
    },
    {
      "id": "resp204_preflight",
      "name": "204 Preflight",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "parameters": {
        "responseCode": 204,
        "responseHeaders": {
          "parameters": [
            {
              "name": "Access-Control-Allow-Origin",
              "value": "={{ $env.CORS_ALLOW_ORIGIN || '*' }}"
            },
            {
              "name": "Access-Control-Allow-Headers",
              "value": "Authorization, Content-Type, X-Requested-With, Idempotency-Key"
            },
            {
              "name": "Access-Control-Allow-Methods",
              "value": "POST, OPTIONS"
            },
            {
              "name": "Access-Control-Max-Age",
              "value": "3600"
            }
          ]
        }
      },
      "position": [
        280,
        80
      ]
    },
    {
      "id": "wh",
      "name": "POST /aiwf/v11",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "parameters": {
        "httpMethod": "POST",
        "path": "aiwf/v11",
        "responseMode": "responseNode",
        "options": {
          "responseCode": 200,
          "responseData": "allEntries"
        }
      },
      "position": [
        60,
        180
      ]
    },
    {
      "id": "cfg",
      "name": "Config",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "parameters": {
        "values": {
          "boolean": [
            {
              "name": "llm_selector_enabled",
              "value": true
            },
            {
              "name": "semantic_enabled",
              "value": true
            },
            {
              "name": "preview",
              "value": false
            },
            {
              "name": "slim",
              "value": true
            },
            {
              "name": "test",
              "value": false
            },
            {
              "name": "require_api_key",
              "value": true
            },
            {
              "name": "debug",
              "value": false
            }
          ],
          "number": [
            {
              "name": "selector_threshold_score",
              "value": 2
            },
            {
              "name": "selector_confidence_min",
              "value": 0.5
            },
            {
              "name": "llm_temperature",
              "value": 0.1
            },
            {
              "name": "llm_max_tokens",
              "value": 200
            },
            {
              "name": "max_nodes_allowed",
              "value": 100
            }
          ],
          "string": [
            {
              "name": "llm_model",
              "value": "openai/gpt-4o-mini"
            },
            {
              "name": "embedding_model",
              "value": "openai/text-embedding-3-small"
            }
          ]
        }
      },
      "position": [
        280,
        180
      ]
    },
    {
      "id": "validate",
      "name": "Validate + Sanitize + Trace",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "// schema + sanitize + trace\nconst input = $json;\nconst errors = [];\nconst inSet = (v, arr) => v == null || arr.includes(String(v));\nconst trace_id = 'tr_' + Math.random().toString(36).slice(2,10) + Date.now().toString(36);\nconst t0 = Date.now();\n\nif (typeof input.workflow_description !== 'string' || input.workflow_description.trim().length < 3) {\n  errors.push({ path: 'workflow_description', msg: 'minLength 3' });\n}\nif (!inSet(input.variant_trigger, ['webhook','cron','gmail_label','rss'])) {\n  errors.push({ path: 'variant_trigger', msg: 'invalid enum' });\n}\nif (!inSet(input.variant_dest, ['sheets','slack','drive'])) {\n  errors.push({ path: 'variant_dest', msg: 'invalid enum' });\n}\n// extras sanitize\nconst ALLOWED_KEYS = new Set(['dest','if']);\nconst ALLOWED_DEST = new Set(['slack','sheets','drive']);\nfunction isPlain(o){ return o && typeof o==='object' && o.constructor===Object; }\nif (input.extras != null) {\n  if (!Array.isArray(input.extras)) {\n    errors.push({ path: 'extras', msg: 'must be array' });\n  } else {\n    const sanitized=[];\n    for (const ex of input.extras.slice(0,20)) {\n      if(!isPlain(ex)) continue;\n      const out={};\n      if (ex.dest && ALLOWED_DEST.has(String(ex.dest))) out.dest=String(ex.dest);\n      if (isPlain(ex.if)) {\n        const ii={};\n        if (typeof ex.if.expr==='string' && ex.if.expr.length<=200) ii.expr=ex.if.expr;\n        if (isPlain(ex.if.then) && ALLOWED_DEST.has(String(ex.if.then.dest))) ii.then={ dest:String(ex.if.then.dest) };\n        if (isPlain(ex.if.else) && ALLOWED_DEST.has(String(ex.if.else.dest))) ii.else={ dest:String(ex.if.else.dest) };\n        if (Object.keys(ii).length) out.if=ii;\n      }\n      if (Object.keys(out).length) sanitized.push(out);\n    }\n    input.extras = sanitized;\n  }\n}\nif (input.api_key && !/^[A-Za-z0-9-_]{16,72}$/.test(input.api_key)) {\n  errors.push({ path: 'api_key', msg: 'invalid format' });\n}\nif (errors.length) {\n  return [{ json: { status: 'invalid', error: 'validation_error', error_details: errors, trace_id, t0, t_mark:{ validate_end: Date.now() } } }];\n}\nlet desc = input.workflow_description\n  .replace(/```[\\s\\S]*?```/g, ' [code omitted] ')\n  .replace(/[<>]/g, s => ({ '<': '&lt;', '>': '&gt;' }[s]));\nif (desc.length > 800) desc = desc.slice(0, 770) + ' [truncated]';\nreturn [{ json: { ...input, q: desc, trace_id, t0, t_mark:{ validate_end: Date.now() } } }];"
      },
      "position": [
        500,
        180
      ]
    },
    {
      "id": "gateInvalid",
      "name": "Invalid Request?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "leftValue": "={{ $json.status }}",
              "rightValue": "invalid",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ]
        }
      },
      "position": [
        700,
        140
      ]
    },
    {
      "id": "resp400bad",
      "name": "400 Invalid",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "parameters": {
        "responseBody": "={{ $json }}",
        "responseCode": 400,
        "responseHeaders": {
          "parameters": [
            {
              "name": "Access-Control-Allow-Origin",
              "value": "={{ $env.CORS_ALLOW_ORIGIN || '*' }}"
            }
          ]
        }
      },
      "position": [
        900,
        120
      ]
    },
    {
      "id": "authrl",
      "name": "Auth+RateLimit (subflow)",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "parameters": {
        "workflowId": "={{ $env.SUB_AUTH_RATE_ID }}",
        "options": {
          "waitForReturnData": true
        },
        "additionalFields": {
          "jsonParameters": true,
          "parameters": {
            "values": [
              {
                "name": "headers",
                "value": "={{ $json.headers || {} }}"
              },
              {
                "name": "api_key",
                "value": "={{ $json.api_key || '' }}"
              },
              {
                "name": "require_api_key",
                "value": "={{ $json.require_api_key }}"
              },
              {
                "name": "path",
                "value": "/aiwf/v11"
              }
            ]
          }
        }
      },
      "position": [
        700,
        220
      ]
    },
    {
      "id": "gate401",
      "name": "Unauthorized?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "leftValue": "={{ $json.status }}",
              "rightValue": "unauthorized",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ]
        }
      },
      "position": [
        900,
        200
      ]
    },
    {
      "id": "resp401",
      "name": "401",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "parameters": {
        "responseBody": "={{ {status:'unauthorized', error:'missing_or_invalid_api_key'} }}",
        "responseCode": 401,
        "responseHeaders": {
          "parameters": [
            {
              "name": "Access-Control-Allow-Origin",
              "value": "={{ $env.CORS_ALLOW_ORIGIN || '*' }}"
            }
          ]
        }
      },
      "position": [
        1100,
        180
      ]
    },
    {
      "id": "gate429",
      "name": "Rate Limited?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "leftValue": "={{ $json.status }}",
              "rightValue": "rate_limited",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ]
        }
      },
      "position": [
        900,
        260
      ]
    },
    {
      "id": "resp429",
      "name": "429 Rate Limited",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "parameters": {
        "responseBody": "={{ {status:'rate_limited', retry_after_ms: ($json.retry_after_ms || 60000)} }}",
        "responseCode": 429,
        "responseHeaders": {
          "parameters": [
            {
              "name": "Retry-After",
              "value": "={{ Math.ceil(($json.retry_after_ms || 60000)/1000) }}"
            },
            {
              "name": "X-RateLimit-Limit",
              "value": "={{ $json.rate_limit?.limit }}"
            },
            {
              "name": "X-RateLimit-Remaining",
              "value": "={{ $json.rate_limit?.remaining }}"
            },
            {
              "name": "X-RateLimit-Reset",
              "value": "={{ $json.rate_limit?.reset_s }}"
            },
            {
              "name": "Access-Control-Allow-Origin",
              "value": "={{ $env.CORS_ALLOW_ORIGIN || '*' }}"
            }
          ]
        }
      },
      "position": [
        1100,
        260
      ]
    },
    {
      "id": "gate503rl",
      "name": "RL Unavailable?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "leftValue": "={{ $json.status }}",
              "rightValue": "rl_unavailable",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ]
        }
      },
      "position": [
        1100,
        320
      ]
    },
    {
      "id": "resp503rl",
      "name": "503 RL Down",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "parameters": {
        "responseBody": "={{ {status:'service_unavailable', error:'rate_limiter_unavailable'} }}",
        "responseCode": 503,
        "responseHeaders": {
          "parameters": [
            {
              "name": "Access-Control-Allow-Origin",
              "value": "={{ $env.CORS_ALLOW_ORIGIN || '*' }}"
            }
          ]
        }
      },
      "position": [
        1300,
        320
      ]
    },
    {
      "id": "t_auth_end",
      "name": "Mark auth_end",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "parameters": {
        "values": {
          "json": [
            {
              "name": "t_mark",
              "value": "={{ Object.assign($json.t_mark||{}, {auth_end: Date.now()}) }}"
            }
          ]
        }
      },
      "position": [
        1300,
        220
      ]
    },
    {
      "id": "idemp_key",
      "name": "Idemp Key",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "const hdr=$json.headers||{}; const raw=hdr['idempotency-key']||hdr['Idempotency-Key']||''; const key=String(raw||''); const base=($json.__q_hash||'q_unk')+ ':' + ($json.__uid_hash||'u_unk'); const final = key ? ('aiwf:idemp:'+key) : ('aiwf:idemp:'+base); return [{ json:{ ...$json, __idemp_key: final } }];"
      },
      "position": [
        1500,
        220
      ]
    },
    {
      "id": "idemp_get",
      "name": "Redis GET Idempotency",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "parameters": {
        "url": "={{ $env.REDIS_REST_URL && ($env.REDIS_REST_URL + '/get/' + encodeURIComponent($json.__idemp_key||'')) }}",
        "method": "GET",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "={{ 'Bearer ' + $env.REDIS_REST_TOKEN }}"
            }
          ]
        }
      },
      "position": [
        1700,
        220
      ],
      "continueOnFail": true
    },
    {
      "id": "gateIdempHit",
      "name": "Idempotent Hit?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "leftValue": "={{ !!$json.result }}",
              "rightValue": "={{ true }}",
              "operator": {
                "type": "boolean",
                "operation": "isTrue"
              }
            }
          ]
        }
      },
      "position": [
        1900,
        220
      ]
    },
    {
      "id": "resp_cached",
      "name": "Return Cached",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "parameters": {
        "responseBody": "={{ (function(){ try{ const o=JSON.parse($json.result||'{}'); return o.body||o; }catch{return {status:'ok',cached:true}; } })() }}",
        "responseCode": "={{ (function(){ try{ const o=JSON.parse($json.result||'{}'); return o.statusCode||200; }catch{return 200;} })() }}",
        "responseHeaders": {
          "parameters": [
            {
              "name": "Access-Control-Allow-Origin",
              "value": "={{ $env.CORS_ALLOW_ORIGIN || '*' }}"
            }
          ]
        }
      },
      "position": [
        2100,
        200
      ]
    },
    {
      "id": "ctx",
      "name": "Context (env + defaults + hashes)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "function pick(...v){return v.find(x=>x&&String(x).trim()!=='');}\nfunction fnv1a32(str){ let h=0x811c9dc5>>>0; for(let i=0;i<str.length;i++){ h^=str.charCodeAt(i); h=(h + ((h<<1)+(h<<4)+(h<<7)+(h<<8)+(h<<24)))>>>0; } return h>>>0; }\nconst env=$env;\nconst usingLLM = Boolean($json.llm_selector_enabled ?? true);\nconst haveKey  = Boolean(env.OPENROUTER_API_KEY);\nconst llmEnabled = usingLLM && haveKey; // hard gate\nconst wantSheets = ($json.variant_dest==='sheets') || (Array.isArray($json.extras) && $json.extras.some(e=>e?.dest==='sheets'));\nconst __sheet_id=pick($json.sheet_id,$json.__sheet_id,env.DEFAULT_SHEET_ID,'');\nconst details={}; let status='ok', error='';\nif(wantSheets){ if(!__sheet_id){ status='env_error'; error='DEFAULT_SHEET_ID not set'; details.missing='DEFAULT_SHEET_ID'; }\n  else if(!/^[A-Za-z0-9-_]{20,}$/.test(__sheet_id)){ status='env_error'; error='DEFAULT_SHEET_ID format invalid'; details.invalid='DEFAULT_SHEET_ID'; } }\nif($json.variant_trigger==='rss'){ const url=pick($json.__rss_url,$json.rss_url,''); if(!/^https?:\\/\\//i.test(url||'')){ status='env_error'; error='RSS URL missing/invalid'; details.rss='__rss_url'; } }\nif($json.variant_trigger==='gmail_label'){ details.warn = { ...(details.warn||{}), gmail:'Gmail trigger requires OAuth creds' }; }\nconst slk=pick($json.slack_channel,$json.__slack_channel,env.DEFAULT_SLACK_CHANNEL,'#alerts');\nconst drv=pick($json.drive_folder_id,$json.__drive_folder,env.DEFAULT_DRIVE_FOLDER,'');\nconst rng=pick($json.sheet_range,$json.__sheet_range,'Sheet1');\nconst uid = ($json.user_id || 'public');\nconst __uid_hash = 'u_'+fnv1a32(String(uid));\nconst __q_hash = 'q_'+fnv1a32(String($json.q||''));\nconst refOk = !!env.REFERRER_URL && env.REFERRER_URL !== 'https://example.com';\nreturn[{json:{...$json,status,error,error_details:details,llm_selector_enabled:llmEnabled,__sheet_id:__sheet_id||'',__sheet_range:rng,__slack_channel:slk,__drive_folder:drv,__uid_hash,__q_hash,__referer_ok:refOk}}];"
      },
      "position": [
        2300,
        220
      ]
    },
    {
      "id": "user_policy_get",
      "name": "Redis GET User Policy",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "parameters": {
        "url": "={{ $env.REDIS_REST_URL && ($env.REDIS_REST_URL + '/get/aiwf:user:' + encodeURIComponent($json.user_id||'public')) }}",
        "method": "GET",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "={{ 'Bearer ' + $env.REDIS_REST_TOKEN }}"
            }
          ]
        }
      },
      "position": [
        2500,
        220
      ],
      "continueOnFail": true
    },
    {
      "id": "user_policy_apply",
      "name": "Apply Policy",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "let pol={}; try{ pol=JSON.parse($json.result||'{}')||{}; }catch{}\nconst allowDest=Array.isArray(pol.allow_dest)?pol.allow_dest.map(String):null;\nconst vd=$json.variant_dest||'';\nif(allowDest && vd && !allowDest.includes(vd)){\n  return [{ json:{ ...$json, status:'forbidden', error:'dest_not_allowed', error_details:{ dest: vd } } }];\n}\nif(Number.isFinite(pol.rl_max)) $json.__rl_max_override=pol.rl_max;\nif(Number.isFinite(pol.embed_cap)) $json.__embed_cap=pol.embed_cap;\nif(Number.isFinite(pol.max_nodes)) $json.max_nodes_allowed=pol.max_nodes;\nif(typeof pol.llm_enabled==='boolean') $json.llm_selector_enabled = pol.llm_enabled && !!$env.OPENROUTER_API_KEY;\nreturn [{ json:$json }];"
      },
      "position": [
        2700,
        220
      ]
    },
    {
      "id": "gate403",
      "name": "Forbidden?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "leftValue": "={{ $json.status }}",
              "rightValue": "forbidden",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ]
        }
      },
      "position": [
        2900,
        220
      ]
    },
    {
      "id": "resp403",
      "name": "403 Forbidden",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "parameters": {
        "responseBody": "={{ $json }}",
        "responseCode": 403,
        "responseHeaders": {
          "parameters": [
            {
              "name": "Access-Control-Allow-Origin",
              "value": "={{ $env.CORS_ALLOW_ORIGIN || '*' }}"
            }
          ]
        }
      },
      "position": [
        3100,
        200
      ]
    },
    {
      "id": "degrade",
      "name": "Degrade?",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "const forced = String($env.DEGRADED||'false').toLowerCase()==='true';\nconst redisDown = (!$env.REDIS_REST_URL || !$env.REDIS_REST_TOKEN);\nconst degraded = forced || redisDown;\nreturn [{ json:{ ...$json, degraded } }];"
      },
      "position": [
        3100,
        260
      ]
    },
    {
      "id": "check_subs",
      "name": "Check Subflow IDs",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "const miss=[]; const need = ['SUB_AUTH_RATE_ID','SUB_SELECT_ID','SUB_COMPOSE_ID','SUB_FINALIZE_ID'];\nfor(const k of need){ if(!$env[k]) miss.push(k); }\nif(String($json.semantic_enabled||'true').toLowerCase()==='true' && !$env.SUB_EMBED_ID){ miss.push('SUB_EMBED_ID'); }\nif(miss.length){ return [{ json:{ status:'service_unavailable', error:'missing_subflow_ids', error_details:{ missing: miss } } }]; }\nreturn [{ json:$json }];"
      },
      "position": [
        3300,
        260
      ]
    },
    {
      "id": "gateSubs",
      "name": "Missing Subflows?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "leftValue": "={{ $json.status }}",
              "rightValue": "service_unavailable",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ]
        }
      },
      "position": [
        3500,
        260
      ]
    },
    {
      "id": "resp503subs",
      "name": "503 Missing Subflows",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "parameters": {
        "responseBody": "={{ $json }}",
        "responseCode": 503,
        "responseHeaders": {
          "parameters": [
            {
              "name": "Access-Control-Allow-Origin",
              "value": "={{ $env.CORS_ALLOW_ORIGIN || '*' }}"
            }
          ]
        }
      },
      "position": [
        3700,
        240
      ]
    },
    {
      "id": "gateRedisDisabled",
      "name": "Redis Disabled?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "leftValue": "={{ !$env.REDIS_REST_URL || !$env.REDIS_REST_TOKEN }}",
              "rightValue": "={{ true }}",
              "operator": {
                "type": "boolean",
                "operation": "isTrue"
              }
            }
          ]
        }
      },
      "position": [
        3700,
        300
      ]
    },
    {
      "id": "markCatUnavailable",
      "name": "Mark Catalog Unavailable",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "catalog_unavailable"
            },
            {
              "name": "error",
              "value": "missing_redis_env"
            }
          ],
          "json": [
            {
              "name": "error_details",
              "value": "{ \"missing\": [\"aiwf:catalog:id2pattern\",\"aiwf:catalog:tag2ids\"] }"
            }
          ]
        }
      },
      "position": [
        3900,
        300
      ]
    },
    {
      "id": "redis_id2",
      "name": "Redis GET id2pattern",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "parameters": {
        "url": "={{ $env.REDIS_REST_URL && ($env.REDIS_REST_URL + '/get/aiwf:catalog:id2pattern') }}",
        "method": "GET",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "={{ 'Bearer ' + $env.REDIS_REST_TOKEN }}"
            }
          ]
        }
      },
      "position": [
        3900,
        340
      ],
      "continueOnFail": true
    },
    {
      "id": "redis_tag2",
      "name": "Redis GET tag2ids",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "parameters": {
        "url": "={{ $env.REDIS_REST_URL && ($env.REDIS_REST_URL + '/get/aiwf:catalog:tag2ids') }}",
        "method": "GET",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "={{ 'Bearer ' + $env.REDIS_REST_TOKEN }}"
            }
          ]
        }
      },
      "position": [
        4100,
        340
      ],
      "continueOnFail": true
    },
    {
      "id": "redis_w",
      "name": "Redis GET weights",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "parameters": {
        "url": "={{ $env.REDIS_REST_URL && ($env.REDIS_REST_URL + '/get/aiwf:weights') }}",
        "method": "GET",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "={{ 'Bearer ' + $env.REDIS_REST_TOKEN }}"
            }
          ]
        }
      },
      "position": [
        4300,
        340
      ],
      "continueOnFail": true
    },
    {
      "id": "catalog",
      "name": "Catalog Merge (require Redis)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "function parseR(x){try{return JSON.parse(x?.json?.result||x?.json?.body||x?.json?.data||'null');}catch{return null;}}\nconst id2=parseR($items('Redis GET id2pattern',0,0)[0]||{});\nconst tag2=parseR($items('Redis GET tag2ids',0,0)[0]||{});\nconst weights=parseR($items('Redis GET weights',0,0)[0]||{});\nconst missing=[];\nif(!id2||Object.keys(id2).length===0) missing.push('aiwf:catalog:id2pattern');\nif(!tag2||Object.keys(tag2).length===0) missing.push('aiwf:catalog:tag2ids');\nif(missing.length){ return[{json:{status:'catalog_unavailable', error:'missing_redis_keys', error_details:{missing}}}]; }\nreturn[{json:{...$json,id2pattern:id2,tag2ids:tag2,__weights:weights||{}, t_mark:Object.assign($json.t_mark||{}, {catalog_end: Date.now()})}}];"
      },
      "position": [
        4500,
        340
      ]
    },
    {
      "id": "gate503cat",
      "name": "Catalog Unavailable?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "leftValue": "={{ $json.status }}",
              "rightValue": "catalog_unavailable",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ]
        }
      },
      "position": [
        4700,
        340
      ]
    },
    {
      "id": "resp503cat",
      "name": "503 Catalog Down",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "parameters": {
        "responseBody": "={{ {status:'service_unavailable', error:'catalog_unavailable', error_details:$json.error_details} }}",
        "responseCode": 503,
        "responseHeaders": {
          "parameters": [
            {
              "name": "Access-Control-Allow-Origin",
              "value": "={{ $env.CORS_ALLOW_ORIGIN || '*' }}"
            }
          ]
        }
      },
      "position": [
        4900,
        340
      ]
    },
    {
      "id": "gateDegradedEmbed",
      "name": "Degraded? (skip embeds)",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "leftValue": "={{ $json.degraded }}",
              "rightValue": "={{ true }}",
              "operator": {
                "type": "boolean",
                "operation": "isTrue"
              }
            }
          ]
        }
      },
      "position": [
        4900,
        260
      ]
    },
    {
      "id": "embed_sub",
      "name": "Semantic Select (subflow, optional)",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "parameters": {
        "workflowId": "={{ $env.SUB_EMBED_ID }}",
        "options": {
          "waitForReturnData": true
        },
        "additionalFields": {
          "jsonParameters": true,
          "parameters": {
            "values": [
              {
                "name": "enabled",
                "value": "={{ $json.semantic_enabled }}"
              },
              {
                "name": "embedding_model",
                "value": "={{ $json.embedding_model }}"
              },
              {
                "name": "q",
                "value": "={{ $json.q }}"
              },
              {
                "name": "id2pattern",
                "value": "={{ $json.id2pattern }}"
              },
              {
                "name": "__embed_cap",
                "value": "={{ $json.__embed_cap || undefined }}"
              }
            ]
          }
        }
      },
      "position": [
        5100,
        220
      ],
      "continueOnFail": true
    },
    {
      "id": "select_sub",
      "name": "Select Pattern (subflow)",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "parameters": {
        "workflowId": "={{ $env.SUB_SELECT_ID }}",
        "options": {
          "waitForReturnData": true
        },
        "additionalFields": {
          "jsonParameters": true,
          "parameters": {
            "values": [
              {
                "name": "q",
                "value": "={{ $json.q }}"
              },
              {
                "name": "id2pattern",
                "value": "={{ $json.id2pattern }}"
              },
              {
                "name": "tag2ids",
                "value": "={{ $json.tag2ids }}"
              },
              {
                "name": "weights",
                "value": "={{ $json.__weights }}"
              },
              {
                "name": "selector_threshold_score",
                "value": "={{ $json.selector_threshold_score }}"
              },
              {
                "name": "semantic_top",
                "value": "={{ $json.semantic_top || [] }}"
              },
              {
                "name": "debug",
                "value": "={{ $json.debug }}"
              }
            ]
          }
        }
      },
      "position": [
        5300,
        300
      ]
    },
    {
      "id": "mark_select_end",
      "name": "Mark select_end",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "parameters": {
        "values": {
          "json": [
            {
              "name": "t_mark",
              "value": "={{ Object.assign($json.t_mark||{}, {select_end: Date.now()}) }}"
            }
          ]
        }
      },
      "position": [
        5500,
        300
      ]
    },
    {
      "id": "need_llm",
      "name": "Below Threshold?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "leftValue": "={{ $json.rule_score }}",
              "rightValue": "={{ parseInt($json.selector_threshold_score||2,10) }}",
              "operator": {
                "type": "number",
                "operation": "smaller"
              }
            }
          ]
        }
      },
      "position": [
        5700,
        300
      ]
    },
    {
      "id": "gateLLM",
      "name": "LLM Enabled?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "leftValue": "={{ $json.llm_selector_enabled }}",
              "rightValue": "={{ true }}",
              "operator": {
                "type": "boolean",
                "operation": "isTrue"
              }
            }
          ]
        }
      },
      "position": [
        5900,
        260
      ]
    },
    {
      "id": "gateDegradedLLM",
      "name": "Degraded? (skip LLM)",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "leftValue": "={{ $json.degraded }}",
              "rightValue": "={{ true }}",
              "operator": {
                "type": "boolean",
                "operation": "isTrue"
              }
            }
          ]
        }
      },
      "position": [
        6100,
        220
      ]
    },
    {
      "id": "llm_slice",
      "name": "LLM Catalog Slice (top-K)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "const id2 = $json.id2pattern || {};\nconst sem = Array.isArray($json.semantic_top)?$json.semantic_top:[];\nconst K = 25;\nlet ids = sem.length ? sem.map(x => x.id) : Object.keys(id2);\nids = ids.filter(id => id2[id]).slice(0, K);\nconst mini = ids.map(id => { const p = id2[id]; return { id: p.id, tags: p.tags || [], description: (p.description||'').slice(0,240) }; });\nreturn [{ json: { ...$json, llm_catalog: mini } }];"
      },
      "position": [
        6300,
        200
      ]
    },
    {
      "id": "llm",
      "name": "LLM Pattern Selector",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "parameters": {
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "method": "POST",
        "jsonParameters": true,
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "={{ 'Bearer ' + $env.OPENROUTER_API_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "HTTP-Referer",
              "value": "={{ $json.__referer_ok ? $env.REFERRER_URL : undefined }}"
            },
            {
              "name": "X-Title",
              "value": "AIWF v11 Pattern Selector"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "={{ $json.llm_model || 'openai/gpt-4o-mini' }}"
            },
            {
              "name": "temperature",
              "value": "={{ Math.min(1, Math.max(0, parseFloat($json.llm_temperature || '0.1'))) }}"
            },
            {
              "name": "max_tokens",
              "value": "={{ Math.min(400, parseInt($json.llm_max_tokens || '200',10)) }}"
            },
            {
              "name": "messages",
              "value": "={{ [ { role:'system', content:'You MUST reply with strict JSON only. Schema: {\"pattern_id\":\"<string>\",\"params\":{},\"confidence\":0..1}. No text outside JSON.' }, { role:'user', content:'Request: ' + ($json.q||'') + '\\nCatalog (top-K): ' + JSON.stringify($json.llm_catalog||[]) } ] }}"
            }
          ]
        },
        "options": {
          "bodyContentType": "json",
          "timeout": 30000,
          "retryOnFail": true,
          "maxRetries": 2
        }
      },
      "position": [
        6500,
        200
      ],
      "continueOnFail": true
    },
    {
      "id": "apply_llm",
      "name": "Apply LLM (strict schema)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "let used=false; let why='';\nfunction tryParse(s){ if(!s) return null; const cleaned=String(s).replace(/^```(?:json)?\\s*/,'').replace(/\\s*```$/,'');\n  try { return JSON.parse(cleaned); } catch{}\n  const m=cleaned.match(/\\{[\\s\\S]*\\}/); if(m){ try{ return JSON.parse(m[0]); }catch{} }\n  return null; }\nfunction validShape(x){ if(!x || typeof x!=='object') return false; if(typeof x.pattern_id!=='string') return false; if(typeof x.confidence!=='number') return false; if(x.params!=null && typeof x.params!=='object') return false; return true; }\ntry {\n  const fr = $json.choices?.[0]?.finish_reason; if(fr==='length'){ why='truncated'; throw new Error('llm_truncated'); }\n  const raw = $json.choices?.[0]?.message?.content || '{}';\n  const sel = tryParse(raw) || {};\n  const ids = Array.isArray($json.llm_catalog)? new Set($json.llm_catalog.map(x=>x.id)) : new Set();\n  if(!validShape(sel)) { why='schema_violation'; throw new Error('schema'); }\n  if(ids.size && !ids.has(sel.pattern_id)){ why='schema_violation'; throw new Error('not_in_llm_catalog'); }\n  const conf = Number(sel.confidence||0);\n  const min = Number($json.selector_confidence_min||0.5);\n  if (conf >= min) { const p = $json.id2pattern?.[sel.pattern_id]; if (p) { $json.selected_pattern_id = p.id; used = true; } else { why='pattern_not_found'; } }\n  else { why = why || 'low_conf'; }\n} catch(e) { $json.fallback_error = e.message; why = why || 'parse_error'; }\n$json.used_llm = used;\n$json.t_mark = Object.assign($json.t_mark||{}, { llm_end: Date.now() });\nif (!used && !$json.selected_pattern_id) {\n  $json.status = 'invalid'; $json.error = 'No matching pattern'; $json.error_details = { ...( $json.error_details||{} ), llm: why };\n}\nreturn [{ json: $json }];"
      },
      "position": [
        6700,
        200
      ]
    },
    {
      "id": "compose_sub",
      "name": "Compose (subflow, decomposed)",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "parameters": {
        "workflowId": "={{ $env.SUB_COMPOSE_ID }}",
        "options": {
          "waitForReturnData": true
        },
        "additionalFields": {
          "jsonParameters": true,
          "parameters": {
            "values": [
              {
                "name": "selected_pattern_id",
                "value": "={{ $json.selected_pattern_id }}"
              },
              {
                "name": "id2pattern",
                "value": "={{ $json.id2pattern }}"
              },
              {
                "name": "variant_trigger",
                "value": "={{ $json.variant_trigger || '' }}"
              },
              {
                "name": "variant_dest",
                "value": "={{ $json.variant_dest || '' }}"
              },
              {
                "name": "extras",
                "value": "={{ $json.extras || [] }}"
              },
              {
                "name": "__sheet_id",
                "value": "={{ $json.__sheet_id }}"
              },
              {
                "name": "__sheet_range",
                "value": "={{ $json.__sheet_range }}"
              },
              {
                "name": "__slack_channel",
                "value": "={{ $json.__slack_channel }}"
              },
              {
                "name": "__drive_folder",
                "value": "={{ $json.__drive_folder }}"
              }
            ]
          }
        }
      },
      "position": [
        6900,
        300
      ]
    },
    {
      "id": "mark_compose_end",
      "name": "Mark compose_end",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "parameters": {
        "values": {
          "json": [
            {
              "name": "t_mark",
              "value": "={{ Object.assign($json.t_mark||{}, {compose_end: Date.now()}) }}"
            }
          ]
        }
      },
      "position": [
        7100,
        300
      ]
    },
    {
      "id": "final_sub",
      "name": "Finalize+Respond (subflow, true sandbox)",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "parameters": {
        "workflowId": "={{ $env.SUB_FINALIZE_ID }}",
        "options": {
          "waitForReturnData": true
        },
        "additionalFields": {
          "jsonParameters": true,
          "parameters": {
            "values": [
              {
                "name": "workflow",
                "value": "={{ $json.workflow }}"
              },
              {
                "name": "selected_pattern_id",
                "value": "={{ $json.selected_pattern_id }}"
              },
              {
                "name": "preview",
                "value": "={{ $json.preview }}"
              },
              {
                "name": "slim",
                "value": "={{ $json.slim }}"
              },
              {
                "name": "test",
                "value": "={{ $json.test }}"
              },
              {
                "name": "debug",
                "value": "={{ $json.debug }}"
              },
              {
                "name": "__drive_folder",
                "value": "={{ $json.__drive_folder }}"
              },
              {
                "name": "rule_score",
                "value": "={{ $json.rule_score }}"
              },
              {
                "name": "candidate_count",
                "value": "={{ $json.candidate_count }}"
              },
              {
                "name": "used_llm",
                "value": "={{ $json.used_llm }}"
              },
              {
                "name": "max_nodes_allowed",
                "value": "={{ $json.max_nodes_allowed }}"
              }
            ]
          }
        }
      },
      "position": [
        7300,
        300
      ]
    },
    {
      "id": "mark_finalize_end",
      "name": "Mark finalize_end",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "parameters": {
        "values": {
          "json": [
            {
              "name": "t_mark",
              "value": "={{ Object.assign($json.t_mark||{}, {finalize_end: Date.now()}) }}"
            }
          ]
        }
      },
      "position": [
        7500,
        300
      ]
    },
    {
      "id": "clamp",
      "name": "Clamp Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "const maxKB=Number($env.RESPONSE_MAX_KB||128); function sizeKB(o){return Math.round(Buffer.byteLength(JSON.stringify(o),'utf8')/10.24)/100;} let truncated=false; const drop=() => { delete $json.id2pattern; delete $json.tag2ids; delete $json.llm_catalog; if($json.workflow && $json.slim!==false){ delete $json.workflow; } }; if(sizeKB($json)>maxKB){ drop(); truncated=true; } $json.meta=Object.assign({}, $json.meta||{}, { truncated }); return [{ json:$json }];"
      },
      "position": [
        7700,
        280
      ]
    },
    {
      "id": "build_meta",
      "name": "Build Meta",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "const m=$json.t_mark||{}; const now=Date.now(); function d(a,b){return (m[b]||now)-(m[a]||$json.t0||now);} const meta={ trace_id: $json.trace_id, degraded: !!$json.degraded, timing:{ validate_ms: d('t0','validate_end'), auth_ms: d('validate_end','auth_end'), catalog_ms: d('auth_end','catalog_end'), select_ms: d('catalog_end','select_end'), llm_ms: d('select_end','llm_end'), compose_ms: d('llm_end','compose_end'), finalize_ms: d('compose_end','finalize_end') } }; return [{ json: { ...$json, meta } }];"
      },
      "position": [
        7900,
        280
      ]
    },
    {
      "id": "idemp_set",
      "name": "Redis SET Idempotency",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "parameters": {
        "url": "={{ $env.REDIS_REST_URL && ($env.REDIS_REST_URL + '/pipeline') }}",
        "method": "POST",
        "jsonParameters": true,
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "={{ 'Bearer ' + $env.REDIS_REST_TOKEN }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "pipeline",
              "value": "={{ (function(){ const ttl=Number($env.IDEMP_TTL_S||900); const statusCode = (($json.status==='invalid'||$json.status==='env_error'||$json.status==='unauthorized')?400:($json.status==='rate_limited'?429:($json.status==='service_unavailable'?503:200))); const payload=JSON.stringify({ statusCode, body:$json }); return [ ['SET', $json.__idemp_key||'aiwf:idemp:missing', payload], ['EXPIRE', $json.__idemp_key||'aiwf:idemp:missing', ttl] ]; })() }}"
            }
          ]
        }
      },
      "position": [
        8100,
        280
      ],
      "continueOnFail": true
    },
    {
      "id": "respond",
      "name": "Respond (API)",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "parameters": {
        "responseBody": "={{ $json }}",
        "responseCode": "={{ ($json.status==='invalid'||$json.status==='env_error'||$json.status==='unauthorized') ? 400 : ($json.status==='rate_limited'?429 : ($json.status==='service_unavailable'?503:200)) }}",
        "responseHeaders": {
          "parameters": [
            {
              "name": "Retry-After",
              "value": "={{ $json.status==='rate_limited' ? Math.ceil(($json.retry_after_ms||60000)/1000) : undefined }}"
            },
            {
              "name": "X-RateLimit-Limit",
              "value": "={{ $json.rate_limit?.limit }}"
            },
            {
              "name": "X-RateLimit-Remaining",
              "value": "={{ $json.rate_limit?.remaining }}"
            },
            {
              "name": "X-RateLimit-Reset",
              "value": "={{ $json.rate_limit?.reset_s }}"
            },
            {
              "name": "Access-Control-Allow-Origin",
              "value": "={{ $env.CORS_ALLOW_ORIGIN || '*' }}"
            }
          ]
        }
      },
      "position": [
        8300,
        300
      ],
      "continueOnFail": true
    },
    {
      "id": "has_events",
      "name": "Has EVENTS_SHEET_ID?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "leftValue": "={{ !!$env.EVENTS_SHEET_ID }}",
              "rightValue": "={{ true }}",
              "operator": {
                "type": "boolean",
                "operation": "isTrue"
              }
            }
          ]
        }
      },
      "position": [
        8500,
        320
      ]
    },
    {
      "id": "log",
      "name": "Log Event (Sheets)",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "parameters": {
        "operation": "append",
        "sheetId": "={{ $env.EVENTS_SHEET_ID || '' }}",
        "range": "events!A:Z",
        "valueInputMode": "RAW",
        "options": {
          "values": "={{ [[ new Date().toISOString(), $json.__uid_hash, $json.__q_hash, $json.selected_pattern_id||'', $json.rule_score||0, !!$json.used_llm, $json.node_count||0, $json.status||'', $json.filename||'', $json.candidate_count||0, ($json.error||''), JSON.stringify($json.error_details||{}), $json.meta?.trace_id||'', !!$json.meta?.degraded ]] }}"
        }
      },
      "position": [
        8700,
        320
      ],
      "continueOnFail": true
    }
  ],
  "connections": {
    "OPTIONS /aiwf/v11": {
      "main": [
        [
          {
            "node": "204 Preflight",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "POST /aiwf/v11": {
      "main": [
        [
          {
            "node": "Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Config": {
      "main": [
        [
          {
            "node": "Validate + Sanitize + Trace",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate + Sanitize + Trace": {
      "main": [
        [
          {
            "node": "Invalid Request?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Invalid Request?": {
      "main": [
        [
          {
            "node": "400 Invalid",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Auth+RateLimit (subflow)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Auth+RateLimit (subflow)": {
      "main": [
        [
          {
            "node": "Unauthorized?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Unauthorized?": {
      "main": [
        [
          {
            "node": "401",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Rate Limited?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rate Limited?": {
      "main": [
        [
          {
            "node": "429 Rate Limited",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "RL Unavailable?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RL Unavailable?": {
      "main": [
        [
          {
            "node": "503 RL Down",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Mark auth_end",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark auth_end": {
      "main": [
        [
          {
            "node": "Idemp Key",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Idemp Key": {
      "main": [
        [
          {
            "node": "Redis GET Idempotency",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis GET Idempotency": {
      "main": [
        [
          {
            "node": "Idempotent Hit?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Idempotent Hit?": {
      "main": [
        [
          {
            "node": "Return Cached",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Context (env + defaults + hashes)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Context (env + defaults + hashes)": {
      "main": [
        [
          {
            "node": "Redis GET User Policy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis GET User Policy": {
      "main": [
        [
          {
            "node": "Apply Policy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apply Policy": {
      "main": [
        [
          {
            "node": "Forbidden?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Forbidden?": {
      "main": [
        [
          {
            "node": "403 Forbidden",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Degrade?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Degrade?": {
      "main": [
        [
          {
            "node": "Check Subflow IDs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Subflow IDs": {
      "main": [
        [
          {
            "node": "Missing Subflows?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Missing Subflows?": {
      "main": [
        [
          {
            "node": "503 Missing Subflows",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Redis Disabled?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Disabled?": {
      "main": [
        [
          {
            "node": "Mark Catalog Unavailable",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Redis GET id2pattern",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark Catalog Unavailable": {
      "main": [
        [
          {
            "node": "503 Catalog Down",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis GET id2pattern": {
      "main": [
        [
          {
            "node": "Redis GET tag2ids",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis GET tag2ids": {
      "main": [
        [
          {
            "node": "Redis GET weights",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis GET weights": {
      "main": [
        [
          {
            "node": "Catalog Merge (require Redis)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Catalog Merge (require Redis)": {
      "main": [
        [
          {
            "node": "Catalog Unavailable?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Catalog Unavailable?": {
      "main": [
        [
          {
            "node": "503 Catalog Down",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Degraded? (skip embeds)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Degraded? (skip embeds)": {
      "main": [
        [
          {
            "node": "Select Pattern (subflow)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Semantic Select (subflow, optional)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Semantic Select (subflow, optional)": {
      "main": [
        [
          {
            "node": "Select Pattern (subflow)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select Pattern (subflow)": {
      "main": [
        [
          {
            "node": "Mark select_end",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark select_end": {
      "main": [
        [
          {
            "node": "Below Threshold?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Below Threshold?": {
      "main": [
        [
          {
            "node": "LLM Enabled?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Compose (subflow, decomposed)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM Enabled?": {
      "main": [
        [
          {
            "node": "Degraded? (skip LLM)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Compose (subflow, decomposed)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Degraded? (skip LLM)": {
      "main": [
        [
          {
            "node": "Compose (subflow, decomposed)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "LLM Catalog Slice (top-K)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM Catalog Slice (top-K)": {
      "main": [
        [
          {
            "node": "LLM Pattern Selector",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM Pattern Selector": {
      "main": [
        [
          {
            "node": "Apply LLM (strict schema)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apply LLM (strict schema)": {
      "main": [
        [
          {
            "node": "Compose (subflow, decomposed)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compose (subflow, decomposed)": {
      "main": [
        [
          {
            "node": "Mark compose_end",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark compose_end": {
      "main": [
        [
          {
            "node": "Finalize+Respond (subflow, true sandbox)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Finalize+Respond (subflow, true sandbox)": {
      "main": [
        [
          {
            "node": "Mark finalize_end",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark finalize_end": {
      "main": [
        [
          {
            "node": "Clamp Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clamp Response": {
      "main": [
        [
          {
            "node": "Build Meta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Meta": {
      "main": [
        [
          {
            "node": "Redis SET Idempotency",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis SET Idempotency": {
      "main": [
        [
          {
            "node": "Respond (API)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond (API)": {
      "main": [
        [
          {
            "node": "Has EVENTS_SHEET_ID?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has EVENTS_SHEET_ID?": {
      "main": [
        [
          {
            "node": "Log Event (Sheets)",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    }
  },
  "active": true,
  "settings": {
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "saveManualExecutions": true
  },
  "tags": [
    "AI",
    "v11",
    "API",
    "Semantic",
    "FailFast",
    "Debug",
    "Degraded",
    "Idempotent"
  ],
  "versionId": "v11-api"
}
